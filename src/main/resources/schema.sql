DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS request CASCADE;
DROP TABLE IF EXISTS items CASCADE;
DROP TABLE IF EXISTS bookings CASCADE;
DROP TABLE IF EXISTS comments CASCADE;

CREATE TABLE IF NOT EXISTS users(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    email VARCHAR(512) NOT NULL,
    name VARCHAR(255) NOT NULL,
    CONSTRAINT pk_user_id PRIMARY KEY(id),
    CONSTRAINT qu_user_email UNIQUE (email)
);
CREATE TABLE IF NOT EXISTS requests(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    textRequest VARCHAR(512) NOT NULL,
    requestor_id BIGINT,
    start_request TIMESTAMP WITHOUT TIME ZONE,
    CONSTRAINT pk_requests_id PRIMARY KEY(id),
    CONSTRAINT fk_requestor_id FOREIGN KEY(requestor_id) REFERENCES users(id)
);

CREATE TABLE IF NOT EXISTS items(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR(255) NOT NULL,
    description VARCHAR(512) NOT NULL,
    available BOOLEAN NOT NULL,
    owner_id BIGINT,
    request_id BIGINT,
    CONSTRAINT pk_items_id PRIMARY KEY (id),
    CONSTRAINT fk_items_owner_id FOREIGN KEY (owner_id) REFERENCES users(id),
    CONSTRAINT fk_item_requests_id FOREIGN KEY (request_id) REFERENCES requests(id)
);

CREATE TABLE IF NOT EXISTS bookings(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    start_date TIMESTAMP WITHOUT TIME ZONE,
    end_date TIMESTAMP WITHOUT TIME ZONE,
    item_id BIGINT,
    booker_id BIGINT,
    status ENUM('WAITING', 'APPROVED', 'REJECTED', 'CANCELED'),
    CONSTRAINT pk_bookings_id PRIMARY KEY(id),
    CONSTRAINT fk_bookings_item_id FOREIGN KEY(item_id) REFERENCES items(id),
    CONSTRAINT fk_bookings_booker_id FOREIGN KEY(booker_id) REFERENCES users(id)
);

CREATE TABLE IF NOT EXISTS comments(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    text VARCHAR(512) NOT NULL,
    item_id BIGINT,
    author_id BIGINT,
    creating_date TIMESTAMP WITHOUT TIME ZONE,
    CONSTRAINT pk_comments_id PRIMARY KEY(id),
    CONSTRAINT fk_comments_item_id FOREIGN KEY(item_id) REFERENCES items(id),
    CONSTRAINT fk_comments_users_id FOREIGN KEY(author_id) REFERENCES users(id)
);